C# コーディング ガイドライン 2025 解説 トランスクリプト

話者 1
今回は、あなたが共有してくれたキータの記事シーシャープコーディングガイドライン2024ですね。これをちょっと深掘りしていきましょう。 命名規則から始まって、コーディング規約、プラクティスまで。えっとかなり網羅的な内容ですよね。で、目的ははっきり生産性の向上と書かれてますね。

話者 2
ええ、そうですね。一貫したルールに従うことで、まあ、コードが読みやすくなって結果。 にバグが減る。でメンテナンスもしやすくなると。あの技術的負債を減らすためのガイドラインっていう位置づけでしょうね。

話者 1
自分で書いたコードでも、時間がたてば他人のコードと同じ。これ結構刺さりますね。では、このガイドラインから、特にえっと重要そうなポイントを一緒に見ていきたいと思います。まずは命名規則ですね。

話者 2
はい。基本のパスカルケースキャメルケースはまあ同じみですが、注目はプライベートなフィールドにアンダースコアをつけるという推奨ですね。

話者 1
あー。これ。 以前のMicrosoftのガイドラインとは少し変わった点ですよね。

話者 2
そうなんです。フィールド変数とあのパラメータ変数とかの区別が、こう視覚的にわかりやすくなるっていうメリットが挙げられてますね。

話者 1
なるほ。 識別しやすさ。

話者 2
ええ。で。同様にディスドットの省略も非推奨と。

話者 1
あ、ディスクドットもですか。

話者 2
はい。 明示することで可読性が上がるとされています。 これもあの設定で、チーム内で統一できるのがポイントですね。

話者 1
ふむふむ。あとロンリチブーリアンですね。これにイズとかハズキャンを付けるとか、二重否定は避けるとか、これつ証明は複数形にするとか。こういう具体的なルールも結構ありますね。

話者 2
で、特に二重否定if not isなるじゃなくて、if isなるの方がまあ直感的ですもんね。

話者 1
確かに。

話者 2
こういう細かいルールの積み重ねが、コードを読む時のなんていうか認知的な負荷を下げてくれるんだと思います。次に高度のレイアウト規則。これも興味深。

話者
へえ。

話者 2
深いです。特にバーの使い方ですね。

話者
あ。

話者 1
あ、まあ。以前は確か右辺から型が明らかな場合に推奨みたいな感じでしたけど。

話者 2
そうなんです。それがこの記事では積極的に使うというふうに変わってますね。

話者 1
へえ、それは結構大きな変化ですね。理由としては、やっぱり冗長性を減らすとか。

話者 2
でしょうね。やっぱりコードがすっきりしますし。最近のCシャープは型推論もかなり賢いですから。もちろんあのなんでもかんでもバーってわけじゃなくて、可読性を損なうなっていう場面ではちゃんと型を示すべきです。 ですけどね。でも基本はバーで行こうという流れかなと。

話者 1
なるほど。それからif文の九かっこを省略しない。これも地味ですけど、改めて言われると確かに大事ですね。

話者 2
で、マージの時とかにうっかり事故が起きるのを防げますしね。

話者 1
そうですよね。 あと、Cシャープジュルからのファイルスコープネームスペースこれもインデントが減ってすごくスッキリしますよね。

話者 2
ハイ、あれはいいですよね。nestが一段階浅くなるだけでも、特に縦に長いファイルだとだいぶ見やすさが変わってきます。 最新の機能を取り入れて、コードをきれいに保つ良い例だと思います。

話者 1
では次にプラクティスアンドイディオムのセクション。ここでは早期リターンが挙げられていますね。

話者 2
ああ、ガード説ですね。メソッドの最初に前提条件をチェックして、ダメならすぐ回数。

話者 1
そうそう。これでメインの処理のnestが深くならずに済む。

話者 2
まさに高度の流れがこう直線的になって読みやすくなりま。 ますよね。首処理に集中できるというか。それからマジックナンバー。意味不明な数字を直接書かない。

話者 1
定数とか意味のある名前の変数を使うと。これも基本中の基本ですけど、徹底が大事ですよね。

話者 2
ええ。そしてこれも重要ですけど、リソース管理、ファイルアクセスとか、DB接続とか。

話者 1
あー、usingステートメント。あるいはusing宣言ですね。

話者 2
そうです。 アイディスポーザブルを実装しているクラスは、確実にディスポーズを呼ぶ必要がある。友人を使えば、まあ例外が起きてもちゃんと解放処理が保証されるので。

話者 1
これを怠ると、リソースリークとか結構厄介な問題につながりますもんね。

話者 2
ええ。アプリケーションが不安定になったりとか、いろいろ考えられますね。

話者 1
うー。 こうしてガイドラインのポイントを見てくると、一つ一つはまあ小さなルールに見えても、全体としてコードの品質とか保守性、チームでの生産性にすごく影響するんだなあっていうのがよくわかりますね。

話者 2
まさにおっしゃる通り。 一貫したスタイルっていうのは、未来の自分とか他の開発者へのまあ配慮とも言えますよね。規約に従うことで多くの問題を防ぎ、結果的に技術的負債を減らせるっていう冒頭の言葉が改めて響きますね。

話者 1
そうですね。さて、これらの規約、本当にたくさんありますけど、ちょっと想像してみてください。 もしあなたの関わるプロジェクトで、これらの小さな規約のうち、例えばそうですね。usingをあまり使わないみたいな慣習がも。 付いてしまっていたとしたら、それって将来どんな大きな、あるいは予期せぬトラブルにつながる可能性があるでしょうか。 少し具体的に考えてみるのも、これらの規約の大切さを再認識するいいきっかけになるかもしれませんね。
